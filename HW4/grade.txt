Output is 80 characters, followed by a carriage-return, partial lines ignored, no lines skipped:
	5/5
Ctrl-D ends the program:
	5/5
Program works with large inputs:
	5/5
If EOF is 80th character, last line is not outputted:
	0/5
Newlines become blanks:
	5/5
If Newline is 80th character, the last character in the line is blank:
	2/2
If Newline is 1st character, the first character in the line is a blank:
	2/2
If Newline is 79th or 81th character, the program handles this correctly:
	1/2
** gets squashed into ^:
	2/2
Output is still 80 characters if there are *s in the line:
	4/4
** is 80th & 81st characters, the program waits for the 81st character and ends the outputted line with a ^:
	5/5
* is 80th character and EOF 81st character:
	4/4
* is 80th character, non-* is 81st character, the line ends with a *:
	2/2
160 *s become 1 line of ^s:
	2/2
Use of multiple processes with forks:
	24/24
Use of pipes:
	12/12
Appropriate text formatting:
	5/5
Array sizes are constants, not hardcoded:
	5/5
Effective and correct use of C constructs:
	5/5
Programmer describes function of program:
	7/7
Programmer includes comments at important junctures in code:
	7/7
Programmer describes invariants, pre- and post-conditions for loops and procedures:
	7/7
Multiple c files piped together, -1 pt/failed test:
	18/18
134/122 = 109.84%
